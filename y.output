Terminals unused in grammar

    INVALID_TOKEN
    END_OF_FILE


State 10 conflicts: 1 shift/reduce
State 29 conflicts: 2 shift/reduce
State 67 conflicts: 12 shift/reduce
State 70 conflicts: 2 shift/reduce
State 72 conflicts: 2 shift/reduce
State 78 conflicts: 12 shift/reduce
State 105 conflicts: 2 shift/reduce
State 112 conflicts: 12 shift/reduce
State 123 conflicts: 12 shift/reduce


Grammar

    0 $accept: prog $end

    1 prog: expr

    2 expr: STRING_CONSTANT
    3     | INTEGER_CONSTANT
    4     | NIL
    5     | MINUS expr
    6     | lvalue
    7     | expr binary_operator expr
    8     | lvalue ASSIGN expr
    9     | ID LPAREN expr_list_opt RPAREN
   10     | LPAREN expr_seq_opt RPAREN
   11     | ID LBRACE field_list_opt RBRACE
   12     | ID LBRACKET expr RBRACKET OF expr
   13     | IF expr THEN expr
   14     | IF expr THEN expr ELSE expr
   15     | WHILE expr DO expr
   16     | FOR ID ASSIGN expr TO expr DO expr
   17     | BREAK
   18     | LET declaration_list IN expr_seq_opt END

   19 expr_seq: expr
   20         | expr_seq SEMICOLON expr

   21 expr_list: expr
   22          | expr_list COMMA expr

   23 field_list: ID EQUAL expr
   24           | field_list COMMA ID EQUAL expr

   25 expr_list_opt: expr_list
   26              | ε

   27 expr_seq_opt: expr_seq
   28             | ε

   29 field_list_opt: field_list
   30               | ε

   31 lvalue: ID
   32       | lvalue DOT ID
   33       | lvalue LBRACKET expr RBRACKET

   34 declaration_list: declaration
   35                 | declaration_list declaration

   36 declaration: type_declaration
   37            | variable_declaration
   38            | function_declaration

   39 type_declaration: TYPE ID EQUAL type

   40 type: ID
   41     | LBRACE type_fields_opt RBRACE
   42     | ARRAY OF ID

   43 type_fields_opt: type_fields
   44                | ε

   45 type_fields: type_field
   46            | type_fields COMMA type_field

   47 type_field: ID COLON ID

   48 variable_declaration: VAR ID ASSIGN expr
   49                     | VAR ID COLON ID ASSIGN expr

   50 function_declaration: FUNCTION ID LPAREN type_fields_opt RPAREN EQUAL expr
   51                     | FUNCTION ID LPAREN type_fields_opt RPAREN COLON ID EQUAL expr

   52 binary_operator: PLUS
   53                | MINUS
   54                | MULTIPLY
   55                | DIVIDE
   56                | EQUAL
   57                | NOT_EQUAL
   58                | GREATER_THAN
   59                | LESS_THAN
   60                | GREATER_THAN_OR_EQUAL
   61                | LESS_THAN_OR_EQUAL
   62                | AND
   63                | OR


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ARRAY (258) 42
    BREAK (259) 17
    DO (260) 15 16
    ELSE (261) 14
    END (262) 18
    FOR (263) 16
    FUNCTION (264) 50 51
    IF (265) 13 14
    IN (266) 18
    LET (267) 18
    NIL (268) 4
    OF (269) 12 42
    THEN (270) 13 14
    TO (271) 16
    TYPE (272) 39
    VAR (273) 48 49
    WHILE (274) 15
    COMMA (275) 22 24 46
    COLON (276) 47 49 51
    SEMICOLON (277) 20
    LPAREN (278) 9 10 50 51
    RPAREN (279) 9 10 50 51
    LBRACKET (280) 12 33
    RBRACKET (281) 12 33
    LBRACE (282) 11 41
    RBRACE (283) 11 41
    DOT (284) 32
    PLUS (285) 52
    MINUS (286) 5 53
    MULTIPLY (287) 54
    DIVIDE (288) 55
    EQUAL (289) 23 24 39 50 51 56
    NOT_EQUAL (290) 57
    LESS_THAN (291) 59
    LESS_THAN_OR_EQUAL (292) 61
    GREATER_THAN (293) 58
    GREATER_THAN_OR_EQUAL (294) 60
    AND (295) 62
    OR (296) 63
    ASSIGN (297) 8 16 48 49
    STRING_CONSTANT (298) 2
    INVALID_TOKEN (299)
    END_OF_FILE (300)
    UNARY_MINUS (301)
    ID <id> (302) 9 11 12 16 23 24 31 32 39 40 42 47 48 49 50 51
    INTEGER_CONSTANT <i> (303) 3
    LOWER_THAN_ELSE (304)


Nonterminals, with rules where they appear

    $accept (50)
        on left: 0
    prog (51)
        on left: 1
        on right: 0
    expr (52)
        on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18
        on right: 1 5 7 8 12 13 14 15 16 19 20 21 22 23 24 33 48 49 50 51
    expr_seq (53)
        on left: 19 20
        on right: 20 27
    expr_list (54)
        on left: 21 22
        on right: 22 25
    field_list (55)
        on left: 23 24
        on right: 24 29
    expr_list_opt (56)
        on left: 25 26
        on right: 9
    expr_seq_opt (57)
        on left: 27 28
        on right: 10 18
    field_list_opt (58)
        on left: 29 30
        on right: 11
    lvalue (59)
        on left: 31 32 33
        on right: 6 8 32 33
    declaration_list (60)
        on left: 34 35
        on right: 18 35
    declaration (61)
        on left: 36 37 38
        on right: 34 35
    type_declaration (62)
        on left: 39
        on right: 36
    type (63)
        on left: 40 41 42
        on right: 39
    type_fields_opt (64)
        on left: 43 44
        on right: 41 50 51
    type_fields (65)
        on left: 45 46
        on right: 43 46
    type_field (66)
        on left: 47
        on right: 45 46
    variable_declaration (67)
        on left: 48 49
        on right: 37
    function_declaration (68)
        on left: 50 51
        on right: 38
    binary_operator (69)
        on left: 52 53 54 55 56 57 58 59 60 61 62 63
        on right: 7


State 0

    0 $accept: • prog $end

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    prog    go to state 12
    expr    go to state 13
    lvalue  go to state 14


State 1

   17 expr: BREAK •

    $default  reduce using rule 17 (expr)


State 2

   16 expr: FOR • ID ASSIGN expr TO expr DO expr

    ID  shift, and go to state 15


State 3

   13 expr: IF • expr THEN expr
   14     | IF • expr THEN expr ELSE expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 16
    lvalue  go to state 14


State 4

   18 expr: LET • declaration_list IN expr_seq_opt END

    FUNCTION  shift, and go to state 17
    TYPE      shift, and go to state 18
    VAR       shift, and go to state 19

    declaration_list      go to state 20
    declaration           go to state 21
    type_declaration      go to state 22
    variable_declaration  go to state 23
    function_declaration  go to state 24


State 5

    4 expr: NIL •

    $default  reduce using rule 4 (expr)


State 6

   15 expr: WHILE • expr DO expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 25
    lvalue  go to state 14


State 7

   10 expr: LPAREN • expr_seq_opt RPAREN

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    $default  reduce using rule 28 (expr_seq_opt)

    expr          go to state 26
    expr_seq      go to state 27
    expr_seq_opt  go to state 28
    lvalue        go to state 14


State 8

    5 expr: MINUS • expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 29
    lvalue  go to state 14


State 9

    2 expr: STRING_CONSTANT •

    $default  reduce using rule 2 (expr)


State 10

    9 expr: ID • LPAREN expr_list_opt RPAREN
   11     | ID • LBRACE field_list_opt RBRACE
   12     | ID • LBRACKET expr RBRACKET OF expr
   31 lvalue: ID •

    LPAREN    shift, and go to state 30
    LBRACKET  shift, and go to state 31
    LBRACE    shift, and go to state 32

    LBRACKET  [reduce using rule 31 (lvalue)]
    $default  reduce using rule 31 (lvalue)


State 11

    3 expr: INTEGER_CONSTANT •

    $default  reduce using rule 3 (expr)


State 12

    0 $accept: prog • $end

    $end  shift, and go to state 33


State 13

    1 prog: expr •
    7 expr: expr • binary_operator expr

    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    $default  reduce using rule 1 (prog)

    binary_operator  go to state 46


State 14

    6 expr: lvalue •
    8     | lvalue • ASSIGN expr
   32 lvalue: lvalue • DOT ID
   33       | lvalue • LBRACKET expr RBRACKET

    LBRACKET  shift, and go to state 47
    DOT       shift, and go to state 48
    ASSIGN    shift, and go to state 49

    $default  reduce using rule 6 (expr)


State 15

   16 expr: FOR ID • ASSIGN expr TO expr DO expr

    ASSIGN  shift, and go to state 50


State 16

    7 expr: expr • binary_operator expr
   13     | IF expr • THEN expr
   14     | IF expr • THEN expr ELSE expr

    THEN                   shift, and go to state 51
    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    binary_operator  go to state 46


State 17

   50 function_declaration: FUNCTION • ID LPAREN type_fields_opt RPAREN EQUAL expr
   51                     | FUNCTION • ID LPAREN type_fields_opt RPAREN COLON ID EQUAL expr

    ID  shift, and go to state 52


State 18

   39 type_declaration: TYPE • ID EQUAL type

    ID  shift, and go to state 53


State 19

   48 variable_declaration: VAR • ID ASSIGN expr
   49                     | VAR • ID COLON ID ASSIGN expr

    ID  shift, and go to state 54


State 20

   18 expr: LET declaration_list • IN expr_seq_opt END
   35 declaration_list: declaration_list • declaration

    FUNCTION  shift, and go to state 17
    IN        shift, and go to state 55
    TYPE      shift, and go to state 18
    VAR       shift, and go to state 19

    declaration           go to state 56
    type_declaration      go to state 22
    variable_declaration  go to state 23
    function_declaration  go to state 24


State 21

   34 declaration_list: declaration •

    $default  reduce using rule 34 (declaration_list)


State 22

   36 declaration: type_declaration •

    $default  reduce using rule 36 (declaration)


State 23

   37 declaration: variable_declaration •

    $default  reduce using rule 37 (declaration)


State 24

   38 declaration: function_declaration •

    $default  reduce using rule 38 (declaration)


State 25

    7 expr: expr • binary_operator expr
   15     | WHILE expr • DO expr

    DO                     shift, and go to state 57
    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    binary_operator  go to state 46


State 26

    7 expr: expr • binary_operator expr
   19 expr_seq: expr •

    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    $default  reduce using rule 19 (expr_seq)

    binary_operator  go to state 46


State 27

   20 expr_seq: expr_seq • SEMICOLON expr
   27 expr_seq_opt: expr_seq •

    SEMICOLON  shift, and go to state 58

    $default  reduce using rule 27 (expr_seq_opt)


State 28

   10 expr: LPAREN expr_seq_opt • RPAREN

    RPAREN  shift, and go to state 59


State 29

    5 expr: MINUS expr •
    7     | expr • binary_operator expr

    AND  shift, and go to state 44
    OR   shift, and go to state 45

    AND       [reduce using rule 5 (expr)]
    OR        [reduce using rule 5 (expr)]
    $default  reduce using rule 5 (expr)

    binary_operator  go to state 46


State 30

    9 expr: ID LPAREN • expr_list_opt RPAREN

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    $default  reduce using rule 26 (expr_list_opt)

    expr           go to state 60
    expr_list      go to state 61
    expr_list_opt  go to state 62
    lvalue         go to state 14


State 31

   12 expr: ID LBRACKET • expr RBRACKET OF expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 63
    lvalue  go to state 14


State 32

   11 expr: ID LBRACE • field_list_opt RBRACE

    ID  shift, and go to state 64

    $default  reduce using rule 30 (field_list_opt)

    field_list      go to state 65
    field_list_opt  go to state 66


State 33

    0 $accept: prog $end •

    $default  accept


State 34

   52 binary_operator: PLUS •

    $default  reduce using rule 52 (binary_operator)


State 35

   53 binary_operator: MINUS •

    $default  reduce using rule 53 (binary_operator)


State 36

   54 binary_operator: MULTIPLY •

    $default  reduce using rule 54 (binary_operator)


State 37

   55 binary_operator: DIVIDE •

    $default  reduce using rule 55 (binary_operator)


State 38

   56 binary_operator: EQUAL •

    $default  reduce using rule 56 (binary_operator)


State 39

   57 binary_operator: NOT_EQUAL •

    $default  reduce using rule 57 (binary_operator)


State 40

   59 binary_operator: LESS_THAN •

    $default  reduce using rule 59 (binary_operator)


State 41

   61 binary_operator: LESS_THAN_OR_EQUAL •

    $default  reduce using rule 61 (binary_operator)


State 42

   58 binary_operator: GREATER_THAN •

    $default  reduce using rule 58 (binary_operator)


State 43

   60 binary_operator: GREATER_THAN_OR_EQUAL •

    $default  reduce using rule 60 (binary_operator)


State 44

   62 binary_operator: AND •

    $default  reduce using rule 62 (binary_operator)


State 45

   63 binary_operator: OR •

    $default  reduce using rule 63 (binary_operator)


State 46

    7 expr: expr binary_operator • expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 67
    lvalue  go to state 14


State 47

   33 lvalue: lvalue LBRACKET • expr RBRACKET

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 68
    lvalue  go to state 14


State 48

   32 lvalue: lvalue DOT • ID

    ID  shift, and go to state 69


State 49

    8 expr: lvalue ASSIGN • expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 70
    lvalue  go to state 14


State 50

   16 expr: FOR ID ASSIGN • expr TO expr DO expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 71
    lvalue  go to state 14


State 51

   13 expr: IF expr THEN • expr
   14     | IF expr THEN • expr ELSE expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 72
    lvalue  go to state 14


State 52

   50 function_declaration: FUNCTION ID • LPAREN type_fields_opt RPAREN EQUAL expr
   51                     | FUNCTION ID • LPAREN type_fields_opt RPAREN COLON ID EQUAL expr

    LPAREN  shift, and go to state 73


State 53

   39 type_declaration: TYPE ID • EQUAL type

    EQUAL  shift, and go to state 74


State 54

   48 variable_declaration: VAR ID • ASSIGN expr
   49                     | VAR ID • COLON ID ASSIGN expr

    COLON   shift, and go to state 75
    ASSIGN  shift, and go to state 76


State 55

   18 expr: LET declaration_list IN • expr_seq_opt END

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    $default  reduce using rule 28 (expr_seq_opt)

    expr          go to state 26
    expr_seq      go to state 27
    expr_seq_opt  go to state 77
    lvalue        go to state 14


State 56

   35 declaration_list: declaration_list declaration •

    $default  reduce using rule 35 (declaration_list)


State 57

   15 expr: WHILE expr DO • expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 78
    lvalue  go to state 14


State 58

   20 expr_seq: expr_seq SEMICOLON • expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 79
    lvalue  go to state 14


State 59

   10 expr: LPAREN expr_seq_opt RPAREN •

    $default  reduce using rule 10 (expr)


State 60

    7 expr: expr • binary_operator expr
   21 expr_list: expr •

    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    $default  reduce using rule 21 (expr_list)

    binary_operator  go to state 46


State 61

   22 expr_list: expr_list • COMMA expr
   25 expr_list_opt: expr_list •

    COMMA  shift, and go to state 80

    $default  reduce using rule 25 (expr_list_opt)


State 62

    9 expr: ID LPAREN expr_list_opt • RPAREN

    RPAREN  shift, and go to state 81


State 63

    7 expr: expr • binary_operator expr
   12     | ID LBRACKET expr • RBRACKET OF expr

    RBRACKET               shift, and go to state 82
    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    binary_operator  go to state 46


State 64

   23 field_list: ID • EQUAL expr

    EQUAL  shift, and go to state 83


State 65

   24 field_list: field_list • COMMA ID EQUAL expr
   29 field_list_opt: field_list •

    COMMA  shift, and go to state 84

    $default  reduce using rule 29 (field_list_opt)


State 66

   11 expr: ID LBRACE field_list_opt • RBRACE

    RBRACE  shift, and go to state 85


State 67

    7 expr: expr • binary_operator expr
    7     | expr binary_operator expr •

    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    PLUS                   [reduce using rule 7 (expr)]
    MINUS                  [reduce using rule 7 (expr)]
    MULTIPLY               [reduce using rule 7 (expr)]
    DIVIDE                 [reduce using rule 7 (expr)]
    EQUAL                  [reduce using rule 7 (expr)]
    NOT_EQUAL              [reduce using rule 7 (expr)]
    LESS_THAN              [reduce using rule 7 (expr)]
    LESS_THAN_OR_EQUAL     [reduce using rule 7 (expr)]
    GREATER_THAN           [reduce using rule 7 (expr)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 7 (expr)]
    AND                    [reduce using rule 7 (expr)]
    OR                     [reduce using rule 7 (expr)]
    $default               reduce using rule 7 (expr)

    binary_operator  go to state 46


State 68

    7 expr: expr • binary_operator expr
   33 lvalue: lvalue LBRACKET expr • RBRACKET

    RBRACKET               shift, and go to state 86
    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    binary_operator  go to state 46


State 69

   32 lvalue: lvalue DOT ID •

    $default  reduce using rule 32 (lvalue)


State 70

    7 expr: expr • binary_operator expr
    8     | lvalue ASSIGN expr •

    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    AND       [reduce using rule 8 (expr)]
    OR        [reduce using rule 8 (expr)]
    $default  reduce using rule 8 (expr)

    binary_operator  go to state 46


State 71

    7 expr: expr • binary_operator expr
   16     | FOR ID ASSIGN expr • TO expr DO expr

    TO                     shift, and go to state 87
    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    binary_operator  go to state 46


State 72

    7 expr: expr • binary_operator expr
   13     | IF expr THEN expr •
   14     | IF expr THEN expr • ELSE expr

    ELSE  shift, and go to state 88
    AND   shift, and go to state 44
    OR    shift, and go to state 45

    AND       [reduce using rule 13 (expr)]
    OR        [reduce using rule 13 (expr)]
    $default  reduce using rule 13 (expr)

    binary_operator  go to state 46


State 73

   50 function_declaration: FUNCTION ID LPAREN • type_fields_opt RPAREN EQUAL expr
   51                     | FUNCTION ID LPAREN • type_fields_opt RPAREN COLON ID EQUAL expr

    ID  shift, and go to state 89

    $default  reduce using rule 44 (type_fields_opt)

    type_fields_opt  go to state 90
    type_fields      go to state 91
    type_field       go to state 92


State 74

   39 type_declaration: TYPE ID EQUAL • type

    ARRAY   shift, and go to state 93
    LBRACE  shift, and go to state 94
    ID      shift, and go to state 95

    type  go to state 96


State 75

   49 variable_declaration: VAR ID COLON • ID ASSIGN expr

    ID  shift, and go to state 97


State 76

   48 variable_declaration: VAR ID ASSIGN • expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 98
    lvalue  go to state 14


State 77

   18 expr: LET declaration_list IN expr_seq_opt • END

    END  shift, and go to state 99


State 78

    7 expr: expr • binary_operator expr
   15     | WHILE expr DO expr •

    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    PLUS                   [reduce using rule 15 (expr)]
    MINUS                  [reduce using rule 15 (expr)]
    MULTIPLY               [reduce using rule 15 (expr)]
    DIVIDE                 [reduce using rule 15 (expr)]
    EQUAL                  [reduce using rule 15 (expr)]
    NOT_EQUAL              [reduce using rule 15 (expr)]
    LESS_THAN              [reduce using rule 15 (expr)]
    LESS_THAN_OR_EQUAL     [reduce using rule 15 (expr)]
    GREATER_THAN           [reduce using rule 15 (expr)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 15 (expr)]
    AND                    [reduce using rule 15 (expr)]
    OR                     [reduce using rule 15 (expr)]
    $default               reduce using rule 15 (expr)

    binary_operator  go to state 46


State 79

    7 expr: expr • binary_operator expr
   20 expr_seq: expr_seq SEMICOLON expr •

    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    $default  reduce using rule 20 (expr_seq)

    binary_operator  go to state 46


State 80

   22 expr_list: expr_list COMMA • expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 100
    lvalue  go to state 14


State 81

    9 expr: ID LPAREN expr_list_opt RPAREN •

    $default  reduce using rule 9 (expr)


State 82

   12 expr: ID LBRACKET expr RBRACKET • OF expr

    OF  shift, and go to state 101


State 83

   23 field_list: ID EQUAL • expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 102
    lvalue  go to state 14


State 84

   24 field_list: field_list COMMA • ID EQUAL expr

    ID  shift, and go to state 103


State 85

   11 expr: ID LBRACE field_list_opt RBRACE •

    $default  reduce using rule 11 (expr)


State 86

   33 lvalue: lvalue LBRACKET expr RBRACKET •

    $default  reduce using rule 33 (lvalue)


State 87

   16 expr: FOR ID ASSIGN expr TO • expr DO expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 104
    lvalue  go to state 14


State 88

   14 expr: IF expr THEN expr ELSE • expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 105
    lvalue  go to state 14


State 89

   47 type_field: ID • COLON ID

    COLON  shift, and go to state 106


State 90

   50 function_declaration: FUNCTION ID LPAREN type_fields_opt • RPAREN EQUAL expr
   51                     | FUNCTION ID LPAREN type_fields_opt • RPAREN COLON ID EQUAL expr

    RPAREN  shift, and go to state 107


State 91

   43 type_fields_opt: type_fields •
   46 type_fields: type_fields • COMMA type_field

    COMMA  shift, and go to state 108

    $default  reduce using rule 43 (type_fields_opt)


State 92

   45 type_fields: type_field •

    $default  reduce using rule 45 (type_fields)


State 93

   42 type: ARRAY • OF ID

    OF  shift, and go to state 109


State 94

   41 type: LBRACE • type_fields_opt RBRACE

    ID  shift, and go to state 89

    $default  reduce using rule 44 (type_fields_opt)

    type_fields_opt  go to state 110
    type_fields      go to state 91
    type_field       go to state 92


State 95

   40 type: ID •

    $default  reduce using rule 40 (type)


State 96

   39 type_declaration: TYPE ID EQUAL type •

    $default  reduce using rule 39 (type_declaration)


State 97

   49 variable_declaration: VAR ID COLON ID • ASSIGN expr

    ASSIGN  shift, and go to state 111


State 98

    7 expr: expr • binary_operator expr
   48 variable_declaration: VAR ID ASSIGN expr •

    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    $default  reduce using rule 48 (variable_declaration)

    binary_operator  go to state 46


State 99

   18 expr: LET declaration_list IN expr_seq_opt END •

    $default  reduce using rule 18 (expr)


State 100

    7 expr: expr • binary_operator expr
   22 expr_list: expr_list COMMA expr •

    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    $default  reduce using rule 22 (expr_list)

    binary_operator  go to state 46


State 101

   12 expr: ID LBRACKET expr RBRACKET OF • expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 112
    lvalue  go to state 14


State 102

    7 expr: expr • binary_operator expr
   23 field_list: ID EQUAL expr •

    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    $default  reduce using rule 23 (field_list)

    binary_operator  go to state 46


State 103

   24 field_list: field_list COMMA ID • EQUAL expr

    EQUAL  shift, and go to state 113


State 104

    7 expr: expr • binary_operator expr
   16     | FOR ID ASSIGN expr TO expr • DO expr

    DO                     shift, and go to state 114
    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    binary_operator  go to state 46


State 105

    7 expr: expr • binary_operator expr
   14     | IF expr THEN expr ELSE expr •

    AND  shift, and go to state 44
    OR   shift, and go to state 45

    AND       [reduce using rule 14 (expr)]
    OR        [reduce using rule 14 (expr)]
    $default  reduce using rule 14 (expr)

    binary_operator  go to state 46


State 106

   47 type_field: ID COLON • ID

    ID  shift, and go to state 115


State 107

   50 function_declaration: FUNCTION ID LPAREN type_fields_opt RPAREN • EQUAL expr
   51                     | FUNCTION ID LPAREN type_fields_opt RPAREN • COLON ID EQUAL expr

    COLON  shift, and go to state 116
    EQUAL  shift, and go to state 117


State 108

   46 type_fields: type_fields COMMA • type_field

    ID  shift, and go to state 89

    type_field  go to state 118


State 109

   42 type: ARRAY OF • ID

    ID  shift, and go to state 119


State 110

   41 type: LBRACE type_fields_opt • RBRACE

    RBRACE  shift, and go to state 120


State 111

   49 variable_declaration: VAR ID COLON ID ASSIGN • expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 121
    lvalue  go to state 14


State 112

    7 expr: expr • binary_operator expr
   12     | ID LBRACKET expr RBRACKET OF expr •

    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    PLUS                   [reduce using rule 12 (expr)]
    MINUS                  [reduce using rule 12 (expr)]
    MULTIPLY               [reduce using rule 12 (expr)]
    DIVIDE                 [reduce using rule 12 (expr)]
    EQUAL                  [reduce using rule 12 (expr)]
    NOT_EQUAL              [reduce using rule 12 (expr)]
    LESS_THAN              [reduce using rule 12 (expr)]
    LESS_THAN_OR_EQUAL     [reduce using rule 12 (expr)]
    GREATER_THAN           [reduce using rule 12 (expr)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 12 (expr)]
    AND                    [reduce using rule 12 (expr)]
    OR                     [reduce using rule 12 (expr)]
    $default               reduce using rule 12 (expr)

    binary_operator  go to state 46


State 113

   24 field_list: field_list COMMA ID EQUAL • expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 122
    lvalue  go to state 14


State 114

   16 expr: FOR ID ASSIGN expr TO expr DO • expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 123
    lvalue  go to state 14


State 115

   47 type_field: ID COLON ID •

    $default  reduce using rule 47 (type_field)


State 116

   51 function_declaration: FUNCTION ID LPAREN type_fields_opt RPAREN COLON • ID EQUAL expr

    ID  shift, and go to state 124


State 117

   50 function_declaration: FUNCTION ID LPAREN type_fields_opt RPAREN EQUAL • expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 125
    lvalue  go to state 14


State 118

   46 type_fields: type_fields COMMA type_field •

    $default  reduce using rule 46 (type_fields)


State 119

   42 type: ARRAY OF ID •

    $default  reduce using rule 42 (type)


State 120

   41 type: LBRACE type_fields_opt RBRACE •

    $default  reduce using rule 41 (type)


State 121

    7 expr: expr • binary_operator expr
   49 variable_declaration: VAR ID COLON ID ASSIGN expr •

    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    $default  reduce using rule 49 (variable_declaration)

    binary_operator  go to state 46


State 122

    7 expr: expr • binary_operator expr
   24 field_list: field_list COMMA ID EQUAL expr •

    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    $default  reduce using rule 24 (field_list)

    binary_operator  go to state 46


State 123

    7 expr: expr • binary_operator expr
   16     | FOR ID ASSIGN expr TO expr DO expr •

    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    PLUS                   [reduce using rule 16 (expr)]
    MINUS                  [reduce using rule 16 (expr)]
    MULTIPLY               [reduce using rule 16 (expr)]
    DIVIDE                 [reduce using rule 16 (expr)]
    EQUAL                  [reduce using rule 16 (expr)]
    NOT_EQUAL              [reduce using rule 16 (expr)]
    LESS_THAN              [reduce using rule 16 (expr)]
    LESS_THAN_OR_EQUAL     [reduce using rule 16 (expr)]
    GREATER_THAN           [reduce using rule 16 (expr)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 16 (expr)]
    AND                    [reduce using rule 16 (expr)]
    OR                     [reduce using rule 16 (expr)]
    $default               reduce using rule 16 (expr)

    binary_operator  go to state 46


State 124

   51 function_declaration: FUNCTION ID LPAREN type_fields_opt RPAREN COLON ID • EQUAL expr

    EQUAL  shift, and go to state 126


State 125

    7 expr: expr • binary_operator expr
   50 function_declaration: FUNCTION ID LPAREN type_fields_opt RPAREN EQUAL expr •

    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    $default  reduce using rule 50 (function_declaration)

    binary_operator  go to state 46


State 126

   51 function_declaration: FUNCTION ID LPAREN type_fields_opt RPAREN COLON ID EQUAL • expr

    BREAK             shift, and go to state 1
    FOR               shift, and go to state 2
    IF                shift, and go to state 3
    LET               shift, and go to state 4
    NIL               shift, and go to state 5
    WHILE             shift, and go to state 6
    LPAREN            shift, and go to state 7
    MINUS             shift, and go to state 8
    STRING_CONSTANT   shift, and go to state 9
    ID                shift, and go to state 10
    INTEGER_CONSTANT  shift, and go to state 11

    expr    go to state 127
    lvalue  go to state 14


State 127

    7 expr: expr • binary_operator expr
   51 function_declaration: FUNCTION ID LPAREN type_fields_opt RPAREN COLON ID EQUAL expr •

    PLUS                   shift, and go to state 34
    MINUS                  shift, and go to state 35
    MULTIPLY               shift, and go to state 36
    DIVIDE                 shift, and go to state 37
    EQUAL                  shift, and go to state 38
    NOT_EQUAL              shift, and go to state 39
    LESS_THAN              shift, and go to state 40
    LESS_THAN_OR_EQUAL     shift, and go to state 41
    GREATER_THAN           shift, and go to state 42
    GREATER_THAN_OR_EQUAL  shift, and go to state 43
    AND                    shift, and go to state 44
    OR                     shift, and go to state 45

    $default  reduce using rule 51 (function_declaration)

    binary_operator  go to state 46
